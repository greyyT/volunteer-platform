// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String               @id @default(cuid())
  name          String
  email         String               @unique
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  portrait      String?
  isVerified    Boolean              @default(false)
  verifications OrganizationVerification[]
  member        UserOrganization[]
  events        Event[]
}

model OrganizationVerification {
  id                String        @id @default(cuid())
  organization      Organization  @relation(fields: [organizationId], references: [id])
  organizationId    String
  verificationPaper String
}

model User {
  id              String                @id @default(cuid())
  name            String
  username        String                @unique
  email           String                @unique
  phone           String?               @unique
  password        String
  creditPoints    Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  portrait        String?
  createdEvents   Event[]
  organizations   UserOrganization[]
  events          UserEventPosition[]
}

model UserOrganization {
  id             String         @id @default(cuid())
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  requestDate    DateTime       @default(now())
  joinDate       DateTime?      @updatedAt
  status         RequestStatus  @default(PENDING)
  role           String?

  @@unique([userId, organizationId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Event {
  id                    String          @id @default(cuid())
  name                  String
  slug                  String          @unique
  isPinned              Boolean         @default(false)
  isVerified            Boolean         @default(false)
  platform              String
  startDate             DateTime
  endDate               DateTime
  createdAt             DateTime        @default(now())
  description           String
  location              String
  organization          Organization?   @relation(fields: [organizationId], references: [id])
  organizationId        String?
  user                  User?           @relation(fields: [userId], references: [id])
  userId                String?
  photos                EventPhoto[]
  positions             EventPosition[]
  contacts              EventContact[]
  verifications         EventVerification[]
}

model EventPhoto {
  id        String    @id @default(cuid())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   String
  photo     String
}

model EventPosition {
  id                  String    @id @default(cuid())
  event               Event     @relation(fields: [eventId], references: [id])
  eventId             String
  name                String
  description         String
  requirements        String
  maxParticipants     Int
  participants        UserEventPosition[]
}

model EventVerification {
  id                String    @id @default(cuid())
  event             Event     @relation(fields: [eventId], references: [id])
  eventId           String
  verificationPaper String
}

model EventContact {
  id         String    @id @default(cuid())
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    String
  method     String
  value      String
}

model UserEventPosition {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  position        EventPosition   @relation(fields: [positionId], references: [id])
  positionId      String
  joinDate        DateTime        @default(now())
}